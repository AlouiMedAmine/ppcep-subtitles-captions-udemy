WEBVTT

00:00.720 --> 00:07.200
Let's go to PyCharm and execute some examples to understand more the difference between generic exceptions

00:07.200 --> 00:08.680
and building exceptions.

00:12.040 --> 00:14.080
Let's start by generic exceptions.

00:14.200 --> 00:16.320
This is the first example.

00:17.360 --> 00:19.840
We define the try and except block.

00:20.120 --> 00:24.520
We don't specify any specific exceptions in the except block.

00:25.480 --> 00:28.720
This try except can catch any type of exceptions.

00:29.480 --> 00:31.880
Let's execute the code and see the result.

00:33.600 --> 00:38.560
An exception occurred, but we don't have any idea about the type of exceptions.

00:39.640 --> 00:41.480
Let's go to the second example.

00:43.480 --> 00:45.320
We have the try except block.

00:45.880 --> 00:47.840
We have an operation.

00:48.880 --> 00:51.840
Then exponentiation 1000.

00:53.880 --> 01:00.000
The result for this operation it can be too large and can throw an throw an exception.

01:00.440 --> 01:02.920
Let's execute the code and see the result.

01:08.760 --> 01:10.200
The number is too large.

01:14.320 --> 01:19.160
And depending of the platform, it can throw an exception.

01:20.400 --> 01:22.960
The type of exceptions are arithmetic error.

01:24.520 --> 01:28.680
We will see with more details the exception hierarchy in Python.

01:29.240 --> 01:37.200
But here I like to show that zero division error and overflow error are subclasses from the arithmetic

01:37.200 --> 01:38.040
error.

01:38.080 --> 01:45.640
Arithmetic error is a subclass from the exception class, and also exception is a subclass from the

01:45.640 --> 01:49.400
base exceptions here.

01:49.440 --> 01:56.480
Just remember that zero division error and overflow error are two classes from arithmetic error.

01:57.560 --> 01:59.200
Let's go back to PyCharm.

01:59.560 --> 02:04.040
Arithmetic error is a subclass from exception.

02:04.280 --> 02:07.360
Let's go to the section to wielding exceptions.

02:10.200 --> 02:19.280
In the first example we have the try except block, but in the except block we specify the type of exception.

02:19.320 --> 02:20.480
Arithmetic error.

02:22.320 --> 02:23.880
Why arithmetic error?

02:24.000 --> 02:27.320
Because version by zero raise arithmetic error.

02:28.840 --> 02:30.240
Let's execute the code.

02:34.600 --> 02:36.360
An arithmetic error occurred.

02:36.360 --> 02:37.520
Division by zero.

02:40.760 --> 02:47.920
In the second example, zero division error is an exception more specified to this operation.

02:48.640 --> 02:56.800
We can catch the same exception by base exception by exception, by arithmetic error, or with more

02:56.800 --> 02:58.920
specified by zero division error.

02:59.720 --> 03:06.120
Like we said in the definition of a building exceptions, it's generally recommended to catch specific

03:06.120 --> 03:08.160
exceptions whenever possible.

03:08.360 --> 03:10.920
In this case, zero division error.

03:13.680 --> 03:21.760
Is more specified than arithmetic error, as this makes the code easier to read, maintain and get more

03:21.760 --> 03:26.200
information about the error and track down issues more easily.

03:26.800 --> 03:29.520
Let's execute the code and see the result.

03:33.400 --> 03:37.240
The same result is zero division error occurred.

03:37.280 --> 03:46.440
We catch the exception with the most specified exception in the upcoming chapter we will see together.

03:46.480 --> 03:52.840
Other building exceptions can be used to catch exceptions in Python.

03:53.080 --> 03:54.560
And that's it for this video.
